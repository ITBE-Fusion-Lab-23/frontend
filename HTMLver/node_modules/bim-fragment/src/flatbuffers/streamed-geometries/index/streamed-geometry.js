// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class StreamedGeometry {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStreamedGeometry(bb, obj) {
        return (obj || new StreamedGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStreamedGeometry(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StreamedGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    geometryId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    position(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    positionLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    positionArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    normal(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    normalLength() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    normalArray() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    index(index) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    indexLength() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    indexArray() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startStreamedGeometry(builder) {
        builder.startObject(4);
    }
    static addGeometryId(builder, geometryIdOffset) {
        builder.addFieldOffset(0, geometryIdOffset, 0);
    }
    static addPosition(builder, positionOffset) {
        builder.addFieldOffset(1, positionOffset, 0);
    }
    static createPositionVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startPositionVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addNormal(builder, normalOffset) {
        builder.addFieldOffset(2, normalOffset, 0);
    }
    static createNormalVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startNormalVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addIndex(builder, indexOffset) {
        builder.addFieldOffset(3, indexOffset, 0);
    }
    static createIndexVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static startIndexVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endStreamedGeometry(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createStreamedGeometry(builder, geometryIdOffset, positionOffset, normalOffset, indexOffset) {
        StreamedGeometry.startStreamedGeometry(builder);
        StreamedGeometry.addGeometryId(builder, geometryIdOffset);
        StreamedGeometry.addPosition(builder, positionOffset);
        StreamedGeometry.addNormal(builder, normalOffset);
        StreamedGeometry.addIndex(builder, indexOffset);
        return StreamedGeometry.endStreamedGeometry(builder);
    }
}
//# sourceMappingURL=streamed-geometry.js.map