// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { StreamedGeometry } from '../../streamed-geometries/index/streamed-geometry.js';
export class StreamedGeometries {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsStreamedGeometries(bb, obj) {
        return (obj || new StreamedGeometries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsStreamedGeometries(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new StreamedGeometries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    geometries(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new StreamedGeometry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    geometriesLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startStreamedGeometries(builder) {
        builder.startObject(1);
    }
    static addGeometries(builder, geometriesOffset) {
        builder.addFieldOffset(0, geometriesOffset, 0);
    }
    static createGeometriesVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startGeometriesVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endStreamedGeometries(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishStreamedGeometriesBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedStreamedGeometriesBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
    static createStreamedGeometries(builder, geometriesOffset) {
        StreamedGeometries.startStreamedGeometries(builder);
        StreamedGeometries.addGeometries(builder, geometriesOffset);
        return StreamedGeometries.endStreamedGeometries(builder);
    }
}
//# sourceMappingURL=streamed-geometries.js.map