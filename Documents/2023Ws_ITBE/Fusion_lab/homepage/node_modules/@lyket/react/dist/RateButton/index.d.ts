import React, { FC } from "react";
export interface RateButtonTemplateComponentProps {
    isLoading: boolean;
    userRating: number;
    averageRating: number;
    totalVotes: number;
    handlePress: (rating: number) => void;
    isCounterVisible: boolean;
    showRating?: "average" | "user";
    totalReviewsLabel?: string;
}
declare type CallbackProps = Components.Schemas.RateButton["data"];
export interface RateButtonProps {
    id: string;
    namespace?: string;
    hideCounterIfLessThan?: number;
    showRating?: "average" | "user";
    totalReviewsLabel?: string;
    onLoad?: (props: CallbackProps) => void;
    onPress?: (props: CallbackProps) => void;
    children?: (props: RateButtonTemplateComponentProps) => React.ReactElement<any, any> | null;
    component?: React.FC<RateButtonTemplateComponentProps>;
}
declare type FCWithTemplates<Props> = FC<Props> & {
    templates: {
        Custom: React.FC<RateButtonTemplateComponentProps>;
        Heart: React.FC<RateButtonTemplateComponentProps>;
        Star: React.FC<RateButtonTemplateComponentProps>;
    };
};
declare const RateButton: FCWithTemplates<RateButtonProps>;
export { RateButton };
