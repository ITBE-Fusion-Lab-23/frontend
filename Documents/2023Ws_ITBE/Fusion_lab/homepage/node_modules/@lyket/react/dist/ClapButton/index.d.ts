import React, { FC } from "react";
export interface ClapButtonTemplateComponentProps {
    isLoading: boolean;
    userClaps: number | undefined;
    totalClaps: number | undefined;
    handlePress: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    isCounterVisible: boolean;
}
declare type CallbackProps = Components.Schemas.ClapButton["data"];
export interface ClapButtonProps {
    id: string;
    namespace?: string;
    hideCounterIfLessThan?: number;
    onLoad?: (props: CallbackProps) => void;
    onPress?: (props: CallbackProps) => void;
    children?: (props: ClapButtonTemplateComponentProps) => React.ReactElement<any, any> | null;
    component?: React.FC<ClapButtonTemplateComponentProps>;
}
declare type FCWithTemplates<Props> = FC<Props> & {
    templates: {
        Simple: React.FC<ClapButtonTemplateComponentProps>;
        Medium: React.FC<ClapButtonTemplateComponentProps>;
        Heart: React.FC<ClapButtonTemplateComponentProps>;
    };
};
declare const ClapButton: FCWithTemplates<ClapButtonProps>;
export { ClapButton };
