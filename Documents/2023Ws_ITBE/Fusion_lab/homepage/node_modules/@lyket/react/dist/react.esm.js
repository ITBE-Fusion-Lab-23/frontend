import React, { useState, useContext, createContext, useEffect, useRef, useCallback } from 'react';
import { jsx, ThemeProvider } from 'theme-ui';
import { keyframes } from '@emotion/react';
import { camelizeKeys } from 'humps';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure " + obj);
}

var getSessionId = function getSessionId() {
  if (typeof window === 'undefined') {
    throw new Error('Session ID cannot be generated server-side!');
  }
  //TODO: remove sessionId legacy name
  var legacySessionId = window.localStorage.getItem('sessionId');
  if (legacySessionId) {
    window.localStorage.setItem('lyket-session-id', legacySessionId);
    window.localStorage.removeItem('sessionId');
  }
  var sessionId = window.localStorage.getItem('lyket-session-id');
  if (sessionId) {
    return sessionId;
  }
  var newSessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  window.localStorage.setItem('lyket-session-id', newSessionId);
  return newSessionId;
};

function lazyLoadScript(src, opts) {
  if (opts === void 0) {
    opts = {};
  }
  return new Promise(function (resolve, reject) {
    var _opts = opts,
      async = _opts.async,
      integrity = _opts.integrity,
      type = _opts.type;
    var sc = document.querySelector("script[src=\"" + src + "\"]");
    if (sc) {
      resolve(sc);
      return;
    }
    var script = document.createElement('script');
    script.src = src;
    if (async) {
      script.setAttribute('async', 'true');
    }
    if (integrity) {
      script.setAttribute('integrity', integrity);
    }
    if (type) {
      script.setAttribute('type', type);
    }
    script.onload = function () {
      return resolve(script);
    };
    script.onerror = function (event) {
      return reject(event);
    };
    document.body.appendChild(script);
  });
}

function generateRecaptchaToken(siteKey, action) {
  return lazyLoadScript("https://www.google.com/recaptcha/api.js?render=" + siteKey).then(function () {
    return new Promise(function (resolve, reject) {
      grecaptcha.ready( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var token;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return grecaptcha.execute(siteKey, {
                  action: action
                });
              case 3:
                token = _context.sent;
                resolve(token);
                _context.next = 11;
                break;
              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                console.error('recaptcha error!', _context.t0);
                reject(_context.t0);
              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      })));
    });
  });
}

var ApiError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(ApiError, _Error);
  function ApiError(requestInfo, requestInit, status, errors) {
    var _this;
    _this = _Error.call(this, "Failed API request to " + requestInfo + " with status " + status) || this;
    _this.requestInfo = requestInfo;
    _this.requestInit = requestInit;
    _this.status = status;
    _this.errors = errors;
    return _this;
  }
  return ApiError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var now = function now() {
  return new Date().getTime();
};
function debounceCollect(func, wait) {
  var timer;
  var timestamp;
  var args = [];
  var deferreds = [];
  function onTimeout() {
    return _onTimeout.apply(this, arguments);
  }
  function _onTimeout() {
    _onTimeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var elapsed;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              elapsed = now() - timestamp;
              if (!(elapsed < wait && elapsed > 0)) {
                _context.next = 5;
                break;
              }
              timer = setTimeout(onTimeout, wait - elapsed);
              _context.next = 9;
              break;
            case 5:
              timer = null;
              _context.next = 8;
              return call();
            case 8:
              if (!timer) {
                reset();
              }
            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _onTimeout.apply(this, arguments);
  }
  function call() {
    return _call.apply(this, arguments);
  }
  function _call() {
    _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var results, i;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return func.call(null, args);
            case 2:
              results = _context2.sent;
              for (i = 0; i < results.length; i++) {
                deferreds[i].resolve(results[i]);
              }
            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _call.apply(this, arguments);
  }
  function reset() {
    args = [];
    deferreds = [];
  }
  return function debounced() {
    for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {
      callArgs[_key] = arguments[_key];
    }
    args.push(callArgs);
    timestamp = now();
    if (!timer) {
      timer = setTimeout(onTimeout, wait);
    }
    return new Promise(function (resolve, reject) {
      deferreds.push({
        resolve: resolve,
        reject: reject
      });
    });
  };
}

var LikeButtonClient = /*#__PURE__*/function () {
  function LikeButtonClient(client) {
    this.client = client;
  }
  var _proto = LikeButtonClient.prototype;
  _proto.press = function press(_ref) {
    var id = _ref.id,
      namespace = _ref.namespace;
    return this.client.put(namespace ? "/like-buttons/" + namespace + "/" + id + "/press" : "/like-buttons/" + id + "/press", "press");
  };
  _proto.info = function info(_ref2) {
    var id = _ref2.id,
      namespace = _ref2.namespace;
    return this.client.enqueueToBatch(namespace ? "/like-buttons/" + namespace + "/" + id : "/like-buttons/" + id);
  };
  return LikeButtonClient;
}();
var ClapButtonClient = /*#__PURE__*/function () {
  function ClapButtonClient(client) {
    this.client = client;
  }
  var _proto2 = ClapButtonClient.prototype;
  _proto2.press = function press(_ref3) {
    var id = _ref3.id,
      namespace = _ref3.namespace;
    return this.client.put(namespace ? "/clap-buttons/" + namespace + "/" + id + "/press" : "/clap-buttons/" + id + "/press", "press");
  };
  _proto2.info = function info(_ref4) {
    var id = _ref4.id,
      namespace = _ref4.namespace;
    return this.client.enqueueToBatch(namespace ? "/clap-buttons/" + namespace + "/" + id : "/clap-buttons/" + id);
  };
  return ClapButtonClient;
}();
var UpdownButtonClient = /*#__PURE__*/function () {
  function UpdownButtonClient(client) {
    this.client = client;
  }
  var _proto3 = UpdownButtonClient.prototype;
  _proto3.info = function info(_ref5) {
    var id = _ref5.id,
      namespace = _ref5.namespace;
    return this.client.enqueueToBatch(namespace ? "/updown-buttons/" + namespace + "/" + id : "/updown-buttons/" + id);
  };
  _proto3.pressUp = function pressUp(_ref6) {
    var id = _ref6.id,
      namespace = _ref6.namespace;
    return this.client.put(namespace ? "/updown-buttons/" + namespace + "/" + id + "/press-up" : "/updown-buttons/" + id + "/press-up", "pressUp");
  };
  _proto3.pressDown = function pressDown(_ref7) {
    var id = _ref7.id,
      namespace = _ref7.namespace;
    return this.client.put(namespace ? "/updown-buttons/" + namespace + "/" + id + "/press-down" : "/updown-buttons/" + id + "/press-down", "pressDown");
  };
  return UpdownButtonClient;
}();
var RateButtonClient = /*#__PURE__*/function () {
  function RateButtonClient(client) {
    this.client = client;
  }
  var _proto4 = RateButtonClient.prototype;
  _proto4.press = function press(_ref8) {
    var id = _ref8.id,
      namespace = _ref8.namespace,
      rating = _ref8.rating;
    return this.client.put(namespace ? "/rate-buttons/" + namespace + "/" + id + "/press" : "/rate-buttons/" + id + "/press", "press", {
      type: "rate-buttons",
      data: {
        attributes: {
          rating: rating
        }
      }
    });
  };
  _proto4.info = function info(_ref9) {
    var id = _ref9.id,
      namespace = _ref9.namespace;
    return this.client.enqueueToBatch(namespace ? "/rate-buttons/" + namespace + "/" + id : "/rate-buttons/" + id);
  };
  return RateButtonClient;
}();
var Client = /*#__PURE__*/function () {
  function Client(_ref10) {
    var apiKey = _ref10.apiKey,
      recaptchaSiteKey = _ref10.recaptchaSiteKey,
      baseUrl = _ref10.baseUrl,
      disableSessionId = _ref10.disableSessionId;
    this.apiKey = apiKey;
    this.recaptchaSiteKey = recaptchaSiteKey;
    this.disableSessionId = disableSessionId;
    this.baseUrl = baseUrl || "https://api.lyket.dev";
    this.likeButtons = new LikeButtonClient(this);
    this.clapButtons = new ClapButtonClient(this);
    this.updownButtons = new UpdownButtonClient(this);
    this.rateButtons = new RateButtonClient(this);
    this.enqueueToBatch = debounceCollect(this.batch.bind(this), 500);
  }
  var _proto5 = Client.prototype;
  _proto5.get = function get(url) {
    return this.request(url);
  };
  _proto5.batch = /*#__PURE__*/function () {
    var _batch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(calls) {
      var url, result;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // return Promise.all(calls.map(args => this.request(args[0])));
              url = "/buttons/batch";
              _context.next = 3;
              return this.request(url, {
                method: "POST",
                body: {
                  type: "batch",
                  data: {
                    attributes: {
                      urls: calls.map(function (args) {
                        return args[0];
                      })
                    }
                  }
                }
              });
            case 3:
              result = _context.sent;
              return _context.abrupt("return", result.data.attributes.responses);
            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    function batch(_x) {
      return _batch.apply(this, arguments);
    }
    return batch;
  }();
  _proto5.put = function put(url, recaptchaAction, body) {
    if (body === void 0) {
      body = {};
    }
    return this.request(url, {
      method: "PUT",
      recaptchaAction: recaptchaAction,
      body: body
    });
  };
  _proto5.request = /*#__PURE__*/function () {
    var _request = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input, init) {
      var defaultHeaders, url, requestInit, response, errorMessages;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(typeof window === "undefined")) {
                _context2.next = 2;
                break;
              }
              throw new Error("Client is supposed to be used client-side only!");
            case 2:
              defaultHeaders = {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: "Bearer " + this.apiKey
              };
              if (!this.disableSessionId) {
                defaultHeaders["x-session-id"] = getSessionId();
              }
              if (!(this.recaptchaSiteKey && init && init.recaptchaAction)) {
                _context2.next = 8;
                break;
              }
              _context2.next = 7;
              return generateRecaptchaToken(this.recaptchaSiteKey, init.recaptchaAction);
            case 7:
              defaultHeaders["x-recaptcha-token"] = _context2.sent;
            case 8:
              url = this.baseUrl + "/v1" + input;
              requestInit = init ? _extends({}, init, {
                headers: _extends({}, defaultHeaders, init.headers),
                body: init.body && JSON.stringify(init.body)
              }) : {
                headers: defaultHeaders
              };
              _context2.next = 12;
              return fetch(url, requestInit);
            case 12:
              response = _context2.sent;
              if (!(response.status < 200 || response.status >= 300)) {
                _context2.next = 18;
                break;
              }
              _context2.next = 16;
              return response.json();
            case 16:
              errorMessages = _context2.sent;
              throw new ApiError(url, requestInit, response.status, errorMessages.errors);
            case 18:
              return _context2.abrupt("return", response.json());
            case 19:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
    function request(_x2, _x3) {
      return _request.apply(this, arguments);
    }
    return request;
  }();
  return Client;
}();

var ClientContext = /*#__PURE__*/React.createContext(null);

var RatingContext = /*#__PURE__*/createContext(undefined);
var RatingProvider = function RatingProvider(_ref) {
  var children = _ref.children;
  var _useState = useState({}),
    registeredButtons = _useState[0],
    forceUpdate = _useState[1];
  var value = {
    registeredButtons: registeredButtons,
    forceUpdate: forceUpdate
  };
  return React.createElement(RatingContext.Provider, {
    value: value
  }, children);
};
var useForceUpdate = function useForceUpdate() {
  var context = useContext(RatingContext);
  if (context === undefined) {
    throw new Error("useForceUpdate must be used within a RatingProvider");
  }
  return context;
};

var defaultTheme = {
  colors: {
    icon: '#292929',
    background: 'transparent',
    text: '#292929',
    primary: '#BFFCED',
    secondary: '#FBDEFB',
    highlight: '#e095ed'
  },
  fonts: {
    body: 'inherit'
  }
};

var clientInstances = {};
var getClientInstanceForSettings = function getClientInstanceForSettings(settings) {
  var key = JSON.stringify(settings);
  if (clientInstances[key]) {
    return clientInstances[key];
  }
  var client = new Client(settings);
  clientInstances[key] = client;
  return client;
};
var Provider = function Provider(_ref) {
  var apiKey = _ref.apiKey,
    recaptchaSiteKey = _ref.recaptchaSiteKey,
    disableSessionId = _ref.disableSessionId,
    baseUrl = _ref.baseUrl,
    children = _ref.children,
    customTheme = _ref.theme;
  var _useState = useState(getClientInstanceForSettings({
      apiKey: apiKey,
      recaptchaSiteKey: recaptchaSiteKey,
      disableSessionId: disableSessionId,
      baseUrl: baseUrl
    })),
    client = _useState[0],
    setClient = _useState[1];
  useEffect(function () {
    setClient(getClientInstanceForSettings({
      apiKey: apiKey,
      recaptchaSiteKey: recaptchaSiteKey,
      disableSessionId: disableSessionId,
      baseUrl: baseUrl
    }));
  }, [apiKey, disableSessionId, recaptchaSiteKey, baseUrl]);
  var theme = customTheme || {
    colors: {},
    fonts: {}
  };
  var colors = _extends({}, defaultTheme.colors, theme.colors);
  var fonts = _extends({}, defaultTheme.fonts, theme.fonts);
  return jsx(ThemeProvider, {
    theme: {
      config: {
        useRootStyles: false,
        useLocalStorage: false,
        useColorSchemeMediaQuery: false
      },
      colors: colors,
      fonts: fonts
    }
  }, jsx(ClientContext.Provider, {
    value: client
  }, jsx(RatingProvider, null, children)));
};

var useSafeEffect = function useSafeEffect(effect, deps) {
  var setState = useState()[1];
  return useEffect(function () {
    function safeRunner() {
      return _safeRunner.apply(this, arguments);
    }
    function _safeRunner() {
      _safeRunner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return effect();
              case 3:
                _context.next = 8;
                break;
              case 5:
                _context.prev = 5;
                _context.t0 = _context["catch"](0);
                setState(function () {
                  throw _context.t0;
                });
              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 5]]);
      }));
      return _safeRunner.apply(this, arguments);
    }
    safeRunner();
    // eslint-disable-next-line
  }, [].concat(deps || [], [setState]));
};

var ClapFull = function ClapFull(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 29 29",
    "aria-label": "clap",
    className: className
  }, React.createElement("path", {
    d: "M13.74 1l.76 2.97.76-2.97zM18.63 2.22l-1.43-.47-.4 3.03zM11.79 1.75l-1.43.47 1.84 2.56zM24.47 14.3L21.45 9c-.29-.43-.69-.7-1.12-.78a1.16 1.16 0 0 0-.91.22c-.3.23-.48.52-.54.84l.05.07 2.85 5c1.95 3.56 1.32 6.97-1.85 10.14a8.46 8.46 0 0 1-.55.5 5.75 5.75 0 0 0 3.36-1.76c3.26-3.27 3.04-6.75 1.73-8.91M14.58 10.89c-.16-.83.1-1.57.7-2.15l-2.5-2.49c-.5-.5-1.38-.5-1.88 0-.18.18-.27.4-.33.63l4.01 4z"
  }), React.createElement("path", {
    d: "M17.81 10.04a1.37 1.37 0 0 0-.88-.6.81.81 0 0 0-.64.15c-.18.13-.71.55-.24 1.56l1.43 3.03a.54.54 0 1 1-.87.61L9.2 7.38a.99.99 0 1 0-1.4 1.4l4.4 4.4a.54.54 0 1 1-.76.76l-4.4-4.4L5.8 8.3a.99.99 0 0 0-1.4 0 .98.98 0 0 0 0 1.39l1.25 1.24 4.4 4.4a.54.54 0 0 1 0 .76.54.54 0 0 1-.76 0l-4.4-4.4a1 1 0 0 0-1.4 0 .98.98 0 0 0 0 1.4l1.86 1.85 2.76 2.77a.54.54 0 0 1-.76.76L4.58 15.7a.98.98 0 0 0-1.4 0 .99.99 0 0 0 0 1.4l5.33 5.32c3.37 3.37 6.64 4.98 10.49 1.12 2.74-2.74 3.27-5.54 1.62-8.56l-2.8-4.94z"
  }));
};

var style = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.5em',
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    },
    fontFamily: 'body'
  },
  icon: {
    height: '1.6em',
    display: 'block',
    margin: '0 auto',
    fill: function fill(theme) {
      var _theme$rawColors2;
      return (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.icon;
    }
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: function borderColor(theme) {
      var _theme$rawColors3;
      return (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.highlight;
    },
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  button: {
    border: 'none !important',
    outline: 'none !important',
    boxShadow: '0 0 0',
    transform: 'translate3d(0,0,0)',
    cursor: 'pointer',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    borderRadius: '100% !important',
    width: '3em !important',
    height: '3em !important',
    padding: '0 !important',
    lineHeight: '1em',
    bg: function bg(theme) {
      var _theme$rawColors4;
      return (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.background;
    },
    ':hover': {
      transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
      opacity: 0.75
    }
  },
  baloon: {
    opacity: '0',
    position: 'absolute',
    fontFamily: 'body',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'white',
    backgroundColor: '#292929',
    borderRadius: '100%',
    fontSize: '.7em',
    height: '2.8em',
    width: '2.8em',
    top: '-1.4em',
    left: '-1.4em'
  },
  centeredContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  buttonContainer: {
    position: 'relative'
  }
};

var baloonFade = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "0",
    transform: "translateY(-3.2em)"
  },
  "72%": {
    opacity: "1",
    transform: "translateY(-4em)"
  },
  "100%": {
    opacity: "0",
    transform: "translateY(-6em)"
  }
});
var iconScale = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ringScale = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "1",
    borderWidth: "0.5em"
  },
  "52%": {
    opacity: "0",
    borderWidth: "0"
  }
});
var BALOON = {
  durationMs: 800,
  animation: baloonFade
};
var ICON = {
  durationMs: 700,
  animation: iconScale
};
var RING = {
  durationMs: 600,
  animation: ringScale
};
var Simple = function Simple(_ref) {
  var _timeoutId$current;
  var isLoading = _ref.isLoading,
    userClaps = _ref.userClaps,
    totalClaps = _ref.totalClaps,
    handlePress = _ref.handlePress,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActive = _useState[0],
    setAnimationActive = _useState[1];
  var timeoutId = useRef(null);
  var handleClick = useCallback(function (e) {
    setAnimationActive(true);
    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }
    timeoutId.current = setTimeout(function () {
      return setAnimationActive(false);
    }, BALOON.durationMs);
    handlePress(e);
  }, [handlePress]);
  var baloonStyle = _extends({}, style.baloon, {
    animation: animationActive ? BALOON.animation + " " + BALOON.durationMs + "ms ease forwards" : null
  });
  var iconStyle = _extends({}, style.icon, {
    animation: animationActive ? ICON.animation + " " + ICON.durationMs + "ms ease forwards" : null
  });
  var ringStyle = _extends({}, style.ring, {
    animation: animationActive ? RING.animation + " " + RING.durationMs + "ms ease forwards" : null
  });
  var buttonStyle = _extends({}, style.button, {
    bg: function bg(theme) {
      var _theme$rawColors, _theme$rawColors2;
      return userClaps ? (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.primary : (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.background;
    }
  });
  return jsx("div", {
    sx: style.root
  }, jsx("div", {
    sx: style.buttonContainer
  }, jsx("div", {
    sx: style.centeredContainer
  }, jsx("div", {
    key: (_timeoutId$current = timeoutId.current) == null ? void 0 : _timeoutId$current.toString(),
    sx: baloonStyle
  }, userClaps)), jsx("button", {
    onClick: handleClick,
    sx: buttonStyle,
    disabled: isLoading
  }, jsx("div", {
    sx: ringStyle
  }), jsx(ClapFull, {
    sx: iconStyle
  }))), isCounterVisible && jsx("div", {
    sx: style.counter
  }, totalClaps));
};

var ClapHeart = function ClapHeart(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.1",
    id: "ClapHeart",
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    viewBox: "0 0 110 115",
    "aria-label": "clap",
    className: className
  }, React.createElement("g", null, React.createElement("g", null, React.createElement("path", {
    d: "M42.68,27.43c-0.7,0-1.4-0.27-1.93-0.8l-5.91-5.91c-1.07-1.07-1.07-2.79,0-3.86c1.07-1.07,2.79-1.07,3.86,0 l5.91,5.91c1.07,1.07,1.07,2.79,0,3.86C44.08,27.16,43.38,27.43,42.68,27.43z"
  })), React.createElement("g", null, React.createElement("path", {
    d: "M70.43,26.52c-0.7,0-1.4-0.27-1.93-0.8c-1.07-1.07-1.07-2.79,0-3.86l5.91-5.91c1.07-1.07,2.79-1.07,3.86,0 c1.07,1.07,1.07,2.79,0,3.86l-5.91,5.91C71.82,26.25,71.13,26.52,70.43,26.52z"
  })), React.createElement("path", {
    d: "M67.23,7.48c-0.12-1.34-0.82-2.56-1.93-3.34l0,0c-1.77-1.24-4.33-0.97-5.94,0.65l-2.8,2.79l-2.79-2.79 c-1.61-1.61-4.17-1.9-5.94-0.65c-1.11,0.78-1.82,2-1.93,3.34c-0.12,1.34,0.36,2.66,1.31,3.61L53.11,17c0.86,0.86,2,1.33,3.22,1.33 c0.07,0,0.15,0,0.23-0.01c0.08,0.01,0.15,0.01,0.23,0.01c1.22,0,2.36-0.47,3.22-1.33l5.91-5.91C66.86,10.14,67.34,8.82,67.23,7.48z"
  }), React.createElement("path", {
    d: "M104.64,60.44c-0.28-1.84-1.22-3.52-2.54-4.83l-0.06-0.06c-1.02-1.02-2.25-1.75-3.6-2.15l0.16-0.16 c3.32-3.32,3.33-8.71,0-12.04l-0.21-0.21c-1-1-2.19-1.71-3.5-2.12c1.4-3.13,0.82-6.94-1.75-9.5l-0.04-0.04 c-1.71-1.71-4.03-2.72-6.45-2.65c-1.76,0.05-3.48,0.54-4.8,1.67c-0.29,0.25-2.61,2.55-3.11,3.04c-0.8,0.79-0.71,2.1,0.19,2.77 l0.88,0.66c0.61,0.46,1.47,0.4,2.01-0.14l2.29-2.29c0.77-0.77,1.79-1.16,2.8-1.16c1.01,0,2.03,0.39,2.8,1.16l0.21,0.21 c1.55,1.55,1.55,4.06,0,5.61l-11.3,11.3c-0.85-0.69-1.81-1.21-2.84-1.53c1.4-3.13,0.82-6.94-1.75-9.5l-0.21-0.21 c-1.61-1.61-3.75-2.49-6.02-2.49c-1.22,0-2.41,0.26-3.49,0.74c-0.39-1.28-1.1-2.49-2.11-3.5l-0.21-0.21 c-1.61-1.61-3.75-2.49-6.02-2.49c-2.27,0-4.41,0.89-6.02,2.49L34.35,48.43c-0.4-1.34-1.13-2.58-2.15-3.6l-1.49-1.49 c-1.26-1.26-2.94-1.96-4.73-1.96c-1.79,0-3.47,0.7-4.73,1.96l-8.49,8.49l-0.58,0.58l-3.64,3.64c-3.64,3.64-5.52,9.27-5.3,15.84 c0.32,9.4,4.72,18.68,11.76,24.83c9.22,8.05,15.07,11.87,23.37,11.87c1.2,0,2.47-0.08,3.9-0.24c9.42-1.05,16.6-7.92,17.23-8.55 l0.44-0.42c0.47-0.04,0.93-0.07,1.43-0.13c9.42-1.05,16.6-7.92,17.23-8.55l23.59-22.88l0.05-0.05 C104.16,65.87,105.05,63.2,104.64,60.44z M92.38,43.04c1.01,0,2.03,0.39,2.8,1.16l0.21,0.21c1.55,1.55,1.55,4.06,0,5.6L81.75,63.66 c-0.74-0.51-1.55-0.92-2.4-1.17l0.16-0.16c2.62-2.62,3.16-6.53,1.65-9.7l8.43-8.43C90.36,43.43,91.37,43.04,92.38,43.04z M56.33,96.56c0,0-6.37,6.37-14.55,7.28c-1.2,0.13-2.32,0.21-3.4,0.21c-6.26,0-10.96-2.53-20.38-10.75 c-11.05-9.64-13.16-27.1-6.24-34.03l3.64-3.64l0.58-0.58l8.49-8.49c0.42-0.42,0.97-0.63,1.51-0.63c0.55,0,1.1,0.21,1.51,0.63 l1.49,1.49c1.55,1.55,1.55,4.06,0,5.6l-6.13,6.2c-0.89,0.9-0.89,2.35,0.01,3.25c0.45,0.45,1.04,0.67,1.63,0.67 c0.59,0,1.18-0.22,1.63-0.67l8.38-8.38l18.7-18.7c0.77-0.77,1.79-1.16,2.8-1.16c1.01,0,2.03,0.39,2.8,1.16l0.21,0.21 c1.55,1.55,1.55,4.06,0,5.61l-17.2,17.2c-0.79,0.79-0.78,2.07,0.02,2.85c0.39,0.38,0.89,0.57,1.4,0.57c0.51,0,1.02-0.2,1.41-0.59 l20.38-20.38c0.77-0.77,1.79-1.16,2.8-1.16c1.01,0,2.03,0.39,2.8,1.16l0.21,0.21c1.55,1.55,1.55,4.06,0,5.61L50.56,67.56 c-0.79,0.79-0.78,2.07,0.02,2.85c0.39,0.38,0.89,0.57,1.4,0.57c0.51,0,1.02-0.2,1.41-0.59L70.48,53.3c0.77-0.77,1.79-1.16,2.8-1.16 c1.01,0,2.03,0.39,2.8,1.16l0.21,0.21c0.38,0.38,0.66,0.81,0.85,1.28l0.27,1.59l0.04-0.04c-0.01,1.01-0.39,2.01-1.16,2.78 L59.54,75.87c-0.91,0.91-0.91,2.4,0.02,3.3c0.45,0.44,1.04,0.66,1.62,0.66c0.59,0,1.19-0.23,1.64-0.68l11.3-11.3 c0.77-0.77,1.79-1.16,2.8-1.16c1.01,0,2.03,0.39,2.8,1.16l0.21,0.21c1.55,1.55,1.55,4.06,0,5.6L56.33,96.56z M99.03,64.57 l-23.6,22.89c0,0-3.81,3.8-9.32,5.94L83.1,76.93l0.02-0.02l0.02-0.02c1.61-1.61,2.49-3.74,2.49-6.02c0-1.3-0.3-2.55-0.84-3.68 l8.42-8.42c0.77-0.77,1.79-1.16,2.8-1.16s2.03,0.39,2.8,1.16l0.21,0.21C100.58,60.51,100.58,63.02,99.03,64.57z"
  })));
};

var style$1 = {
  root: {
    color: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.4em',
    fontFamily: 'body',
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    }
  },
  icon: {
    height: '2.2em',
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    p: 0,
    '@media (hover: hover)': {
      ':hover': {
        svg: {
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
          transform: 'scale(1.05)'
        }
      },
      ':active': {
        svg: {
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
          transform: 'scale(1)'
        }
      }
    }
  },
  baloon: {
    opacity: '0',
    position: 'absolute',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'white',
    backgroundColor: '#292929',
    fontFamily: 'body',
    borderRadius: '100%',
    fontSize: '.6em',
    height: '2.4em',
    width: '2.4em',
    top: '-1.2em',
    left: '-1.2em'
  },
  centeredContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  buttonContainer: {
    position: 'relative'
  }
};

var baloonFade$1 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0.2',
    transform: 'translateY(-3.2em)'
  },
  '72%': {
    opacity: '1',
    transform: 'translateY(-3.8em)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-5.2em)'
  }
});
var triangleFade = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0',
    transform: 'translateY(-0.5em) scale(1)'
  },
  '32%': {
    opacity: '1',
    transform: 'translateY(-1em) scale(1.3)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-2em) scale(1.6)'
  }
});
var iconScale$1 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(1)'
  },
  '32%': {
    transform: 'scale(1.1)'
  },
  '100%': {
    transform: 'scale(1.05)'
  }
});
var BALOON$1 = {
  durationMs: 800,
  animation: baloonFade$1
};
var TRIANGLES = {
  count: 5,
  size: 0.2,
  color: function color(theme) {
    var _theme$rawColors;
    return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.secondary;
  },
  durationMs: 300,
  animation: triangleFade
};
var CIRCLES = {
  count: 5,
  size: 0.05,
  color: function color(theme) {
    var _theme$rawColors2;
    return (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.primary;
  },
  durationMs: 500,
  animation: triangleFade
};
var ICON$1 = {
  durationMs: CIRCLES.durationMs,
  animation: iconScale$1
};
var Heart = function Heart(_ref) {
  var _timeoutId$current;
  var isLoading = _ref.isLoading,
    userClaps = _ref.userClaps,
    totalClaps = _ref.totalClaps,
    handlePress = _ref.handlePress,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActive = _useState[0],
    setAnimationActive = _useState[1];
  var triangles = [];
  for (var i = 0; i < TRIANGLES.count; i++) {
    var trianglesStyle = {
      width: '0',
      height: '0',
      opacity: '0',
      borderLeft: TRIANGLES.size + "em solid transparent",
      borderRight: TRIANGLES.size + "em solid transparent",
      borderTop: TRIANGLES.size + "em solid " + TRIANGLES.color,
      position: 'absolute',
      animation: animationActive ? triangleFade + " " + TRIANGLES.durationMs + "ms ease forwards" : null
    };
    var trianglesContainerStyle = {
      transform: "rotate(" + 360 / TRIANGLES.count * i + "deg)",
      transformOrigin: TRIANGLES.size + "em 0",
      marginLeft: "-" + TRIANGLES.size + "em"
    };
    triangles.push(jsx("div", {
      key: i,
      sx: trianglesContainerStyle
    }, jsx("div", {
      sx: trianglesStyle
    })));
  }
  var circles = [];
  for (var _i = 0; _i < CIRCLES.count; _i++) {
    var circlesStyle = {
      width: '0',
      height: '0',
      opacity: '0',
      padding: CIRCLES.size + "em",
      backgroundColor: "" + CIRCLES.color,
      borderRadius: '100%',
      position: 'absolute',
      animation: animationActive ? triangleFade + " " + CIRCLES.durationMs + "ms ease forwards" : null
    };
    var circleContainerStyle = {
      transform: "rotate(" + 360 / CIRCLES.count * _i + "deg)",
      transformOrigin: CIRCLES.size + "em 0",
      marginLeft: "-" + CIRCLES.size + "em"
    };
    circles.push(jsx("div", {
      key: _i,
      sx: circleContainerStyle
    }, jsx("div", {
      sx: circlesStyle
    })));
  }
  var timeoutId = useRef(null);
  var handleClick = useCallback(function (e) {
    setAnimationActive(true);
    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }
    timeoutId.current = setTimeout(function () {
      return setAnimationActive(false);
    }, BALOON$1.durationMs);
    handlePress(e);
  }, [handlePress]);
  var iconStyle = _extends({}, style$1.icon, {
    fill: function fill(theme) {
      var _theme$rawColors3, _theme$rawColors4;
      return userClaps && userClaps > 0 ? (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.highlight : (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.icon;
    },
    animation: animationActive ? ICON$1.animation + " " + ICON$1.durationMs + "ms ease forwards" : null
  });
  var baloonStyle = _extends({}, style$1.baloon, {
    animation: animationActive ? BALOON$1.animation + " " + BALOON$1.durationMs + "ms ease forwards" : null
  });
  return jsx("div", {
    sx: style$1.root
  }, jsx("div", {
    sx: style$1.buttonContainer
  }, jsx("div", {
    sx: style$1.centeredContainer
  }, jsx("div", {
    key: (_timeoutId$current = timeoutId.current) == null ? void 0 : _timeoutId$current.toString(),
    sx: baloonStyle
  }, userClaps)), jsx("button", {
    onClick: handleClick,
    sx: style$1.button,
    disabled: isLoading
  }, jsx("div", {
    sx: style$1.centeredContainer
  }, " ", triangles, " "), jsx("div", {
    sx: style$1.centeredContainer
  }, " ", circles, " "), jsx(ClapHeart, {
    sx: iconStyle
  }))), isCounterVisible && jsx("div", {
    sx: style$1.counter
  }, totalClaps));
};

var ClapEmpty = function ClapEmpty(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 33 33",
    "aria-label": "clap",
    className: className
  }, React.createElement("path", {
    d: "M28.86 17.34l-3.64-6.4c-.3-.43-.71-.73-1.16-.8a1.12 1.12 0 0 0-.9.21c-.62.5-.73 1.18-.32 2.06l1.22 2.6 1.4 2.45c2.23 4.09 1.51 8-2.15 11.66a9.6 9.6 0 0 1-.8.71 6.53 6.53 0 0 0 4.3-2.1c3.82-3.82 3.57-7.87 2.05-10.39zm-6.25 11.08c3.35-3.35 4-6.78 1.98-10.47L21.2 12c-.3-.43-.71-.72-1.16-.8a1.12 1.12 0 0 0-.9.22c-.62.49-.74 1.18-.32 2.06l1.72 3.63a.5.5 0 0 1-.81.57l-8.91-8.9a1.33 1.33 0 0 0-1.89 1.88l5.3 5.3a.5.5 0 0 1-.71.7l-5.3-5.3-1.49-1.49c-.5-.5-1.38-.5-1.88 0a1.34 1.34 0 0 0 0 1.89l1.49 1.5 5.3 5.28a.5.5 0 0 1-.36.86.5.5 0 0 1-.36-.15l-5.29-5.29a1.34 1.34 0 0 0-1.88 0 1.34 1.34 0 0 0 0 1.89l2.23 2.23L9.3 21.4a.5.5 0 0 1-.36.85.5.5 0 0 1-.35-.14l-3.32-3.33a1.33 1.33 0 0 0-1.89 0 1.32 1.32 0 0 0-.39.95c0 .35.14.69.4.94l6.39 6.4c3.53 3.53 8.86 5.3 12.82 1.35zM12.73 9.26l5.68 5.68-.49-1.04c-.52-1.1-.43-2.13.22-2.89l-3.3-3.3a1.34 1.34 0 0 0-1.88 0 1.33 1.33 0 0 0-.4.94c0 .22.07.42.17.61zm14.79 19.18a7.46 7.46 0 0 1-6.41 2.31 7.92 7.92 0 0 1-3.67.9c-3.05 0-6.12-1.63-8.36-3.88l-6.4-6.4A2.31 2.31 0 0 1 2 19.72a2.33 2.33 0 0 1 1.92-2.3l-.87-.87a2.34 2.34 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.64l-.14-.14a2.34 2.34 0 0 1 0-3.3 2.39 2.39 0 0 1 3.3 0l.14.14a2.33 2.33 0 0 1 3.95-1.24l.09.09c.09-.42.29-.83.62-1.16a2.34 2.34 0 0 1 3.3 0l3.38 3.39a2.17 2.17 0 0 1 1.27-.17c.54.08 1.03.35 1.45.76.1-.55.41-1.03.9-1.42a2.12 2.12 0 0 1 1.67-.4 2.8 2.8 0 0 1 1.85 1.25l3.65 6.43c1.7 2.83 2.03 7.37-2.2 11.6zM13.22.48l-1.92.89 2.37 2.83-.45-3.72zm8.48.88L19.78.5l-.44 3.7 2.36-2.84zM16.5 3.3L15.48 0h2.04L16.5 3.3z",
    fillRule: "evenodd"
  }));
};

var ClapFull$1 = function ClapFull(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 29 29",
    "aria-label": "clap",
    className: className
  }, React.createElement("path", {
    d: "M13.74 1l.76 2.97.76-2.97zM18.63 2.22l-1.43-.47-.4 3.03zM11.79 1.75l-1.43.47 1.84 2.56zM24.47 14.3L21.45 9c-.29-.43-.69-.7-1.12-.78a1.16 1.16 0 0 0-.91.22c-.3.23-.48.52-.54.84l.05.07 2.85 5c1.95 3.56 1.32 6.97-1.85 10.14a8.46 8.46 0 0 1-.55.5 5.75 5.75 0 0 0 3.36-1.76c3.26-3.27 3.04-6.75 1.73-8.91M14.58 10.89c-.16-.83.1-1.57.7-2.15l-2.5-2.49c-.5-.5-1.38-.5-1.88 0-.18.18-.27.4-.33.63l4.01 4z"
  }), React.createElement("path", {
    d: "M17.81 10.04a1.37 1.37 0 0 0-.88-.6.81.81 0 0 0-.64.15c-.18.13-.71.55-.24 1.56l1.43 3.03a.54.54 0 1 1-.87.61L9.2 7.38a.99.99 0 1 0-1.4 1.4l4.4 4.4a.54.54 0 1 1-.76.76l-4.4-4.4L5.8 8.3a.99.99 0 0 0-1.4 0 .98.98 0 0 0 0 1.39l1.25 1.24 4.4 4.4a.54.54 0 0 1 0 .76.54.54 0 0 1-.76 0l-4.4-4.4a1 1 0 0 0-1.4 0 .98.98 0 0 0 0 1.4l1.86 1.85 2.76 2.77a.54.54 0 0 1-.76.76L4.58 15.7a.98.98 0 0 0-1.4 0 .99.99 0 0 0 0 1.4l5.33 5.32c3.37 3.37 6.64 4.98 10.49 1.12 2.74-2.74 3.27-5.54 1.62-8.56l-2.8-4.94z"
  }));
};

var style$2 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.6em',
    fontFamily: 'body'
  },
  icon: {
    height: '2em',
    fill: function fill(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.icon;
    },
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms'
  },
  button: {
    border: 'none',
    outline: 'none',
    cursor: 'pointer',
    background: 'transparent',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    p: 0,
    '@media (hover: hover)': {
      ':hover': {
        transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
        opacity: 0.65
      },
      ':active': {
        svg: {
          transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
          transform: 'scale(0.9)'
        }
      }
    }
  },
  baloon: {
    opacity: '0',
    position: 'absolute',
    fontFamily: 'inherit',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    color: 'white',
    backgroundColor: '#292929',
    borderRadius: '100%',
    fontSize: '.7em',
    height: '2.4em',
    width: '2.4em',
    top: '-1.2em',
    left: '-1.2em',
    '@media (hover: hover)': {
      ':hover': {
        opacity: '1'
      }
    }
  },
  centeredContainer: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  buttonContainer: {
    position: 'relative'
  }
};

var baloonFade$2 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0.5',
    transform: 'translateY(-2.6em)'
  },
  '72%': {
    opacity: '1',
    transform: 'translateY(-3.4em)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-5em)'
  }
});
var triangleFade$1 = /*#__PURE__*/keyframes({
  '0%': {
    opacity: '0',
    transform: 'translateY(-0.5em) scale(1)'
  },
  '32%': {
    opacity: '1',
    transform: 'translateY(-1em) scale(1.3)'
  },
  '100%': {
    opacity: '0',
    transform: 'translateY(-2em) scale(1.6)'
  }
});
var iconScale$2 = /*#__PURE__*/keyframes({
  '0%': {
    transform: 'scale(1)'
  },
  '32%': {
    transform: 'scale(1.1)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
var BALOON$2 = {
  durationMs: 800,
  animation: baloonFade$2
};
var TRIANGLES$1 = {
  count: 5,
  size: 0.2,
  color: '#ff365e',
  durationMs: 300,
  animation: triangleFade$1
};
var CIRCLES$1 = {
  count: 5,
  size: 0.05,
  color: '#4086ff',
  durationMs: 500,
  animation: triangleFade$1
};
var ICON$2 = {
  durationMs: CIRCLES$1.durationMs,
  animation: iconScale$2
};
var Medium = function Medium(_ref) {
  var _timeoutId$current;
  var isLoading = _ref.isLoading,
    userClaps = _ref.userClaps,
    totalClaps = _ref.totalClaps,
    handlePress = _ref.handlePress,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActive = _useState[0],
    setAnimationActive = _useState[1];
  var triangles = [];
  for (var i = 0; i < TRIANGLES$1.count; i++) {
    triangles.push(jsx("div", {
      key: i,
      sx: {
        transform: "rotate(" + 360 / TRIANGLES$1.count * i + "deg)",
        transformOrigin: TRIANGLES$1.size + "em 0",
        marginLeft: "-" + TRIANGLES$1.size + "em"
      }
    }, jsx("div", {
      sx: {
        width: '0',
        height: '0',
        opacity: '0',
        borderLeft: TRIANGLES$1.size + "em solid transparent",
        borderRight: TRIANGLES$1.size + "em solid transparent",
        borderTop: TRIANGLES$1.size + "em solid " + TRIANGLES$1.color,
        position: 'absolute',
        animation: animationActive ? triangleFade$1 + " " + TRIANGLES$1.durationMs + "ms ease forwards" : null
      }
    })));
  }
  var circles = [];
  for (var _i = 0; _i < CIRCLES$1.count; _i++) {
    circles.push(jsx("div", {
      key: _i,
      sx: {
        transform: "rotate(" + 360 / CIRCLES$1.count * _i + "deg)",
        transformOrigin: CIRCLES$1.size + "em 0",
        marginLeft: "-" + CIRCLES$1.size + "em"
      }
    }, jsx("div", {
      sx: {
        width: '0',
        height: '0',
        opacity: '0',
        padding: CIRCLES$1.size + "em",
        backgroundColor: "" + CIRCLES$1.color,
        borderRadius: '100%',
        position: 'absolute',
        animation: animationActive ? triangleFade$1 + " " + CIRCLES$1.durationMs + "ms ease forwards" : null
      }
    })));
  }
  var timeoutId = useRef(null);
  var handleClick = useCallback(function (e) {
    setAnimationActive(true);
    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }
    timeoutId.current = setTimeout(function () {
      return setAnimationActive(false);
    }, BALOON$2.durationMs);
    handlePress(e);
  }, [handlePress]);
  var Icon = userClaps && userClaps > 0 ? ClapFull$1 : ClapEmpty;
  var iconStyle = _extends({}, style$2.icon, {
    animation: animationActive ? ICON$2.animation + " " + ICON$2.durationMs + "ms ease forwards" : null
  });
  var baloonStyle = _extends({}, style$2.baloon, {
    animation: animationActive ? BALOON$2.animation + " " + BALOON$2.durationMs + "ms ease forwards" : null
  });
  return jsx("div", {
    sx: style$2.root
  }, jsx("div", {
    sx: style$2.buttonContainer
  }, jsx("div", {
    sx: style$2.centeredContainer
  }, jsx("div", {
    key: (_timeoutId$current = timeoutId.current) == null ? void 0 : _timeoutId$current.toString(),
    sx: baloonStyle
  }, userClaps)), jsx("button", {
    onClick: handleClick,
    sx: style$2.button,
    disabled: isLoading
  }, jsx("div", {
    sx: style$2.centeredContainer
  }, " ", triangles, " "), jsx("div", {
    sx: style$2.centeredContainer
  }, " ", circles, " "), jsx(Icon, {
    sx: iconStyle
  }))), isCounterVisible && jsx("div", {
    sx: style$2.counter
  }, totalClaps));
};

var templates = {
  Simple: Simple,
  Medium: Medium,
  Heart: Heart
};
var ClapButton = function ClapButton(_ref) {
  var id = _ref.id,
    namespace = _ref.namespace,
    hideCounterIfLessThan = _ref.hideCounterIfLessThan,
    children = _ref.children,
    component = _ref.component,
    onLoad = _ref.onLoad,
    onPress = _ref.onPress;
  var client = useContext(ClientContext);
  var _useState = useState(null),
    response = _useState[0],
    setResponse = _useState[1];
  useSafeEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            if (!client) {
              _context.next = 7;
              break;
            }
            _context.next = 4;
            return client.clapButtons.info({
              id: id,
              namespace: namespace
            });
          case 4:
            result = _context.sent;
            setResponse(result.data);
            if (onLoad) {
              onLoad(camelizeKeys(result.data));
            }
          case 7:
            _context.next = 13;
            break;
          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            console.error("Lyket error:", _context.t0.errors[0].message);
            throw _context.t0;
          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  })), [client, id, namespace, setResponse]);
  var handlePress = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var result;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.preventDefault();
              _context2.prev = 1;
              if (!client) {
                _context2.next = 8;
                break;
              }
              _context2.next = 5;
              return client.clapButtons.press({
                id: id,
                namespace: namespace
              });
            case 5:
              result = _context2.sent;
              setResponse(result.data);
              if (onPress) {
                onPress(camelizeKeys(result.data));
              }
            case 8:
              _context2.next = 14;
              break;
            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](1);
              console.error("Lyket error:", _context2.t0.errors[0].message);
              throw _context2.t0;
            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 10]]);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [client, id, namespace, onPress]);
  var isCounterVisible = true;
  if (!response || hideCounterIfLessThan && response && response.attributes.total_claps < hideCounterIfLessThan) {
    isCounterVisible = false;
  }
  var props = {
    isLoading: !response,
    totalClaps: (response == null ? void 0 : response.attributes.total_claps) || 0,
    userClaps: (response == null ? void 0 : response.attributes.user_claps) || 0,
    handlePress: handlePress,
    isCounterVisible: isCounterVisible
  };
  if (children) {
    return children(props);
  }
  var Component = component || Simple;
  return React.createElement(Component, Object.assign({}, props));
};
ClapButton.templates = templates;

var ThumbIcon = function ThumbIcon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg",
    className: className
  }, React.createElement("path", {
    transform: "scale(-1, 1) translate(-1200, 0)",
    d: "m1100 333.33c36.668 0 66.668 30 66.668 66.668v733.33c0 36.668-30 66.668-66.668 66.668h-133.33c-36.668 0-66.668-30-66.668-66.668v-733.33c0-36.668 30-66.668 66.668-66.668zm-604.64-300.63 281.27 377.4c7.332 10.734 11.664 23.734 11.664 37.734v666.66c0 36.801-29.867 66.668-66.664 66.668h-466.67c-29.465 0-55.398-19.332-63.867-47.535l-152.2-581.33c-25.266-85.465 38.734-171.13 127.87-171.13h221.53l-65.598-266.67c-13.867-97.266 106.2-154.2 172.66-81.801z",
    fillRule: "evenodd"
  }));
};

var style$3 = {
  root: {
    color: "inherit",
    fontFamily: "inherit",
    display: "inline-flex",
    alignItems: "center"
  },
  counter: {
    ml: ".5em",
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    },
    fontFamily: "body"
  },
  icon: {
    height: "1.2em",
    display: "block",
    margin: "0 auto",
    fill: function fill(theme) {
      var _theme$rawColors2;
      return (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.icon;
    }
  },
  ring: {
    opacity: "0",
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: function borderColor(theme) {
      var _theme$rawColors3;
      return (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.highlight;
    },
    boxSizing: "border-box",
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  },
  button: {
    border: "none !important",
    outline: "none !important",
    boxShadow: "0 0 0",
    transform: "translate3d(0,0,0)",
    cursor: "pointer",
    bg: function bg(theme) {
      var _theme$rawColors4;
      return (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.background;
    },
    appearance: "none",
    position: "relative",
    fontSize: "inherit",
    transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
    borderRadius: "100% !important",
    width: "3em !important",
    height: "3em !important",
    padding: "0 !important",
    lineHeight: "1em",
    ":hover": {
      transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
      opacity: 0.75
    }
  }
};

var iconScale$3 = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ringScale$1 = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "1",
    borderWidth: "0.5em"
  },
  "52%": {
    opacity: "0",
    borderWidth: "0"
  }
});
var RING$1 = {
  durationMs: 600,
  animation: ringScale$1
};
var ICON$3 = {
  animation: iconScale$3,
  durationMs: 700
};
var Base = function Base(_ref) {
  var isLoading = _ref.isLoading,
    userLiked = _ref.userLiked,
    totalLikes = _ref.totalLikes,
    handlePress = _ref.handlePress,
    isCounterVisible = _ref.isCounterVisible,
    Icon = _ref.Icon;
  var _useState = useState(false),
    animationActive = _useState[0],
    setAnimationActive = _useState[1];
  var handleClick = useCallback(function (e) {
    handlePress(e);
    if (!userLiked) {
      setAnimationActive(true);
      setTimeout(function () {
        return setAnimationActive(false);
      }, ICON$3.durationMs);
    }
  }, [userLiked, handlePress]);
  var iconStyle = _extends({}, style$3.icon, {
    animation: animationActive ? ICON$3.animation + " " + ICON$3.durationMs + "ms ease forwards" : null
  });
  var ringStyle = _extends({}, style$3.ring, {
    animation: animationActive ? RING$1.animation + " " + RING$1.durationMs + "ms ease forwards" : null
  });
  var buttonStyle = {
    bg: function bg(theme) {
      var _theme$rawColors, _theme$rawColors2;
      return userLiked ? (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.primary : (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.background;
    }
  };
  return jsx("div", {
    sx: style$3.root
  }, jsx("button", {
    onClick: handleClick,
    disabled: isLoading,
    sx: _extends({}, style$3.button, buttonStyle)
  }, jsx("div", {
    sx: ringStyle
  }), jsx(Icon, {
    sx: iconStyle
  })), isCounterVisible && jsx("div", {
    sx: style$3.counter
  }, totalLikes));
};

var Simple$1 = function Simple(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return jsx(Base, Object.assign({}, props, {
    Icon: ThumbIcon
  }));
};

var TwitterHeartFull = function TwitterHeartFull(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 24 24",
    className: className
  }, React.createElement("g", null, React.createElement("path", {
    d: "M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12z"
  })));
};

var TwitterHeartEmpty = function TwitterHeartEmpty(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    viewBox: "0 0 24 24",
    className: className
  }, React.createElement("g", null, React.createElement("path", {
    d: "M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z"
  })));
};

var style$4 = {
  root: {
    color: "inherit",
    fontFamily: "inherit",
    display: "inline-flex",
    alignItems: "center"
  },
  counter: {
    ml: ".4em",
    fontFamily: "body",
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    }
  },
  icon: {
    height: "1.7em",
    display: "block",
    margin: "0 auto",
    backfaceVisibility: "hidden"
  },
  button: {
    border: "none !important",
    outline: "none !important",
    cursor: "pointer",
    background: "transparent",
    appearance: "none",
    position: "relative",
    fontSize: "inherit",
    borderRadius: "100% !important",
    transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
    width: "3em !important",
    height: "3em !important",
    padding: "0 !important",
    lineHeight: "1em",
    "@media (hover: hover)": {
      ":hover": {
        transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
        backgroundColor: "#E5214A20"
      }
    }
  },
  dotsRotContainer: {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  },
  dotsContainer: {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%) rotate(165deg)"
  },
  ring: {
    opacity: "0",
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    boxSizing: "border-box",
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  }
};

var dotBurst = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "0",
    transform: "translateY(-0.5em) scale(1)"
  },
  "52%": {
    opacity: "1",
    transform: "translateY(-1.6em) scale(1.3)"
  },
  "100%": {
    transform: "translateY(-2.7em) scale(0)"
  }
});
var iconScale$4 = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ringScale$2 = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "1",
    borderWidth: "0.5em"
  },
  "52%": {
    opacity: "0",
    borderWidth: "0"
  }
});
var DOTS = {
  count: 6,
  size: 0.2,
  colors: ["lightcoral", "yellow", "pink", "lightseagreen", "orange", "aliceblue"],
  durationMs: 600,
  animation: dotBurst
};
var RING$2 = {
  color: "#e095ed",
  durationMs: DOTS.durationMs,
  animation: ringScale$2
};
var HEART = {
  animation: iconScale$4,
  durationMs: 700
};
var Twitter = function Twitter(_ref) {
  var isLoading = _ref.isLoading,
    userLiked = _ref.userLiked,
    totalLikes = _ref.totalLikes,
    handlePress = _ref.handlePress,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActive = _useState[0],
    setAnimationActive = _useState[1];
  var dots = [];
  for (var i = 0; i < DOTS.count; i++) {
    dots.push(jsx("div", {
      key: i,
      sx: {
        transform: "rotate(" + 360 / DOTS.count * i + "deg)",
        transformOrigin: DOTS.size + "em 0",
        marginLeft: "-" + DOTS.size + "em"
      }
    }, jsx("div", {
      sx: {
        opacity: "0",
        width: DOTS.size + "em",
        height: DOTS.size + "em",
        borderRadius: DOTS.size + "em",
        backgroundColor: "" + DOTS.colors[i],
        position: "absolute",
        animation: animationActive ? dotBurst + " " + DOTS.durationMs + "ms ease forwards" : null
      }
    })));
  }
  var ring = jsx("div", {
    sx: _extends({}, style$4.ring, {
      border: "1px solid " + RING$2.color,
      animation: animationActive ? RING$2.animation + " " + RING$2.durationMs + "ms ease forwards" : null
    })
  });
  var handleClick = useCallback(function (e) {
    if (!userLiked) {
      setAnimationActive(true);
      setTimeout(function () {
        return setAnimationActive(false);
      }, DOTS.durationMs);
    }
    handlePress(e);
  }, [userLiked, handlePress]);
  var Icon = userLiked ? TwitterHeartFull : TwitterHeartEmpty;
  var buttonStyle = {
    fill: userLiked && !isLoading ? "#E5214A" : "#aaa",
    animation: animationActive ? HEART.animation + " " + HEART.durationMs + "ms ease forwards" : null
  };
  return jsx("div", {
    sx: style$4.root
  }, jsx("button", {
    onClick: handleClick,
    sx: style$4.button,
    disabled: isLoading
  }, jsx("div", {
    sx: style$4.dotsContainer
  }, " ", dots, " "), jsx("div", {
    sx: style$4.dotsRotContainer
  }, " ", dots, " "), ring, jsx(Icon, {
    sx: _extends({}, style$4.icon, buttonStyle)
  })), isCounterVisible && jsx("div", {
    sx: style$4.counter
  }, totalLikes));
};

var ChevronIcon = function ChevronIcon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    className: className,
    version: "1.1",
    viewBox: "0 100 1200 1200",
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("path", {
    d: "m79.965 909.7c-18.34 18.211-48.031 18.211-66.242 0-18.34-18.34-18.34-47.898 0-66.242l553.16-553.16c18.34-18.34 47.898-18.34 66.242 0l553.16 553.16c18.34 18.34 18.34 47.898 0 66.242-18.211 18.211-47.898 18.211-66.242 0l-520.04-520.04z",
    fillRule: "evenodd"
  }));
};

var Chevron = function Chevron(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return jsx(Base, Object.assign({}, props, {
    Icon: ChevronIcon
  }));
};

var Icon = function Icon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg",
    className: className
  }, React.createElement("path", {
    d: "m600 158.93c-62.824-71.18-154.74-116.07-257.14-116.07-189.35 0-342.86 153.5-342.86 342.86v1.1562c0 231.78 199.52 488.54 598.56 770.27 354.02-252.97 551.38-483.47 592.07-691.51 6.1211-25.641 9.3633-52.402 9.3633-79.922 0-189.36-153.5-342.86-342.86-342.86-102.4 0-194.32 44.895-257.14 116.07z",
    fillRule: "evenodd"
  }));
};

var Heart$1 = function Heart(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return jsx(Base, Object.assign({}, props, {
    Icon: Icon
  }));
};

var templates$1 = {
  Simple: Simple$1,
  Twitter: Twitter,
  Chevron: Chevron,
  Heart: Heart$1
};
var LikeButton = function LikeButton(_ref) {
  var id = _ref.id,
    namespace = _ref.namespace,
    hideCounterIfLessThan = _ref.hideCounterIfLessThan,
    children = _ref.children,
    component = _ref.component,
    onLoad = _ref.onLoad,
    onPress = _ref.onPress;
  var client = useContext(ClientContext);
  var _useState = useState(null),
    response = _useState[0],
    setResponse = _useState[1];
  useSafeEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (client) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            _context.prev = 2;
            _context.next = 5;
            return client.likeButtons.info({
              id: id,
              namespace: namespace
            });
          case 5:
            result = _context.sent;
            setResponse(result.data);
            if (onLoad) {
              onLoad(camelizeKeys(result.data));
            }
            _context.next = 14;
            break;
          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](2);
            console.error("Lyket error:", _context.t0 == null ? void 0 : _context.t0.errors[0].message);
            throw _context.t0;
          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 10]]);
  })), [client, id, namespace, onLoad, setResponse]);
  var handlePress = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var result;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.preventDefault();
              if (client) {
                _context2.next = 3;
                break;
              }
              return _context2.abrupt("return");
            case 3:
              _context2.prev = 3;
              _context2.next = 6;
              return client.likeButtons.press({
                id: id,
                namespace: namespace
              });
            case 6:
              result = _context2.sent;
              setResponse(result.data);
              if (onPress) {
                onPress(camelizeKeys(result.data));
              }
              _context2.next = 15;
              break;
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](3);
              console.error("Lyket error:", _context2.t0 == null ? void 0 : _context2.t0.errors[0].message);
              throw _context2.t0;
            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[3, 11]]);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [client, id, namespace, onPress, setResponse]);
  var isCounterVisible = true;
  if (!response || hideCounterIfLessThan && response && response.attributes.total_likes < hideCounterIfLessThan) {
    isCounterVisible = false;
  }
  var props = {
    isLoading: !response,
    totalLikes: (response == null ? void 0 : response.attributes.total_likes) || 0,
    userLiked: response == null ? void 0 : response.attributes.user_has_liked,
    handlePress: handlePress,
    isCounterVisible: isCounterVisible
  };
  if (children) {
    return children(props);
  }
  var Component = component || Simple$1;
  return React.createElement(Component, Object.assign({}, props));
};
LikeButton.templates = templates$1;

var ThumbIcon$1 = function ThumbIcon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg",
    className: className
  }, React.createElement("path", {
    transform: "scale(-1, 1) translate(-1200, 0)",
    d: "m1100 333.33c36.668 0 66.668 30 66.668 66.668v733.33c0 36.668-30 66.668-66.668 66.668h-133.33c-36.668 0-66.668-30-66.668-66.668v-733.33c0-36.668 30-66.668 66.668-66.668zm-604.64-300.63 281.27 377.4c7.332 10.734 11.664 23.734 11.664 37.734v666.66c0 36.801-29.867 66.668-66.664 66.668h-466.67c-29.465 0-55.398-19.332-63.867-47.535l-152.2-581.33c-25.266-85.465 38.734-171.13 127.87-171.13h221.53l-65.598-266.67c-13.867-97.266 106.2-154.2 172.66-81.801z",
    fillRule: "evenodd"
  }));
};

var style$5 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.5em',
    mr: '.5em',
    minWidth: '2em',
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    },
    textAlign: 'center',
    fontFamily: 'body',
    fontWeight: 'body'
  },
  icon: {
    height: '1em',
    display: 'block',
    margin: '0 auto',
    fill: function fill(theme) {
      var _theme$rawColors2;
      return (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.icon;
    }
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: function borderColor(theme) {
      var _theme$rawColors3;
      return (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.highlight;
    },
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  button: {
    border: 'none !important',
    outline: 'none !important',
    cursor: 'pointer',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '100% !important',
    width: '3em !important',
    height: '3em !important',
    padding: '0 !important',
    lineHeight: '1em',
    bg: function bg(theme) {
      var _theme$rawColors4;
      return (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.background;
    },
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    opacity: 1,
    boxShadow: '0 0 0',
    transform: 'translate3d(0,0,0)',
    ':hover': {
      transition: 'all 250ms cubic-bezier(0.4, 0.0, 0.2, 1) 0ms',
      opacity: 0.75
    }
  }
};

var iconScale$5 = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ringScale$3 = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "1",
    borderWidth: "0.5em"
  },
  "52%": {
    opacity: "0",
    borderWidth: "0"
  }
});
var RING$3 = {
  durationMs: 600,
  animation: ringScale$3
};
var ICON$4 = {
  animation: iconScale$5,
  durationMs: 700
};
var Simple$2 = function Simple(_ref) {
  var isLoading = _ref.isLoading,
    userVoteDirection = _ref.userVoteDirection,
    totalScore = _ref.totalScore,
    handlePressUp = _ref.handlePressUp,
    handlePressDown = _ref.handlePressDown,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActiveUp = _useState[0],
    setAnimationActiveUp = _useState[1];
  var _useState2 = useState(false),
    animationActiveDown = _useState2[0],
    setAnimationActiveDown = _useState2[1];
  var handleClickUp = useCallback(function (e) {
    handlePressUp(e);
    if (userVoteDirection !== 1) {
      setAnimationActiveUp(true);
      setTimeout(function () {
        return setAnimationActiveUp(false);
      }, ICON$4.durationMs);
    }
  }, [userVoteDirection, handlePressUp]);
  var handleClickDown = useCallback(function (e) {
    handlePressDown(e);
    if (userVoteDirection !== -1) {
      setAnimationActiveDown(true);
      setTimeout(function () {
        return setAnimationActiveDown(false);
      }, ICON$4.durationMs);
    }
  }, [userVoteDirection, handlePressDown]);
  var iconStyleUp = _extends({}, style$5.icon, {
    animation: animationActiveUp ? ICON$4.animation + " " + ICON$4.durationMs + "ms ease forwards" : null
  });
  var iconStyleDown = _extends({}, style$5.icon, {
    animation: animationActiveDown ? ICON$4.animation + " " + ICON$4.durationMs + "ms ease forwards" : null
  });
  var ringStyleUp = _extends({}, style$5.ring, {
    animation: animationActiveUp ? RING$3.animation + " " + RING$3.durationMs + "ms ease forwards" : null
  });
  var ringStyleDown = _extends({}, style$5.ring, {
    animation: animationActiveDown ? RING$3.animation + " " + RING$3.durationMs + "ms ease forwards" : null
  });
  var upButtonStyle = {
    bg: function bg(theme) {
      var _theme$rawColors, _theme$rawColors2;
      return userVoteDirection === 1 ? (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.primary : (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.background;
    }
  };
  var downButtonStyle = {
    bg: function bg(theme) {
      var _theme$rawColors3, _theme$rawColors4;
      return userVoteDirection === -1 ? (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.secondary : (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.background;
    }
  };
  return jsx("div", {
    sx: style$5.root
  }, jsx("button", {
    onClick: handleClickUp,
    disabled: isLoading,
    sx: _extends({}, style$5.button, upButtonStyle)
  }, jsx("div", {
    sx: ringStyleUp
  }), jsx(ThumbIcon$1, {
    sx: iconStyleUp
  })), isCounterVisible && jsx("div", {
    sx: style$5.counter
  }, totalScore), isLoading && jsx("div", {
    sx: style$5.counter
  }, "-"), jsx("button", {
    onClick: handleClickDown,
    disabled: isLoading,
    sx: _extends({}, style$5.button, downButtonStyle)
  }, jsx("div", {
    sx: ringStyleDown
  }), jsx("div", {
    style: {
      transform: "rotate(180deg)"
    }
  }, jsx(ThumbIcon$1, {
    sx: iconStyleDown
  }))));
};

var ChevronIcon$1 = function ChevronIcon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    id: "Chevron",
    className: className,
    viewBox: "0 100 1200 1200",
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("path", {
    d: "m79.965 909.7c-18.34 18.211-48.031 18.211-66.242 0-18.34-18.34-18.34-47.898 0-66.242l553.16-553.16c18.34-18.34 47.898-18.34 66.242 0l553.16 553.16c18.34 18.34 18.34 47.898 0 66.242-18.211 18.211-47.898 18.211-66.242 0l-520.04-520.04z",
    fillRule: "evenodd"
  }));
};

var style$6 = {
  root: {
    color: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center'
  },
  counter: {
    ml: '.5em',
    mr: '.5em',
    minWidth: '2em',
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    },
    textAlign: 'center',
    fontFamily: 'body'
  },
  icon: {
    height: '1em',
    display: 'block',
    margin: '0 auto',
    fill: function fill(theme) {
      var _theme$rawColors2;
      return (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.icon;
    }
  },
  ring: {
    opacity: '0',
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: function borderColor(theme) {
      var _theme$rawColors3;
      return (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.highlight;
    },
    boxSizing: 'border-box',
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  button: {
    border: 'none !important',
    outline: 'none !important',
    cursor: 'pointer',
    appearance: 'none',
    position: 'relative',
    fontSize: 'inherit',
    borderRadius: '100% !important',
    width: '3em !important',
    height: '3em !important',
    padding: '0 !important',
    lineHeight: '1em',
    bg: function bg(theme) {
      var _theme$rawColors4;
      return (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.background;
    },
    transition: 'all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',
    opacity: 1,
    boxShadow: '0 0 0',
    transform: 'translate3d(0,0,0)',
    ':hover': {
      transition: 'all 250ms cubic-bezier(0.4, 0.0, 0.2, 1) 0ms',
      opacity: 0.75
    }
  }
};

var iconScale$6 = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ringScale$4 = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "1",
    borderWidth: "0.5em"
  },
  "52%": {
    opacity: "0",
    borderWidth: "0"
  }
});
var RING$4 = {
  durationMs: 600,
  animation: ringScale$4
};
var ICON$5 = {
  animation: iconScale$6,
  durationMs: 700
};
var Chevron$1 = function Chevron(_ref) {
  var isLoading = _ref.isLoading,
    userVoteDirection = _ref.userVoteDirection,
    totalScore = _ref.totalScore,
    handlePressUp = _ref.handlePressUp,
    handlePressDown = _ref.handlePressDown,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActiveUp = _useState[0],
    setAnimationActiveUp = _useState[1];
  var _useState2 = useState(false),
    animationActiveDown = _useState2[0],
    setAnimationActiveDown = _useState2[1];
  var handleClickUp = useCallback(function (e) {
    handlePressUp(e);
    if (userVoteDirection !== 1) {
      setAnimationActiveUp(true);
      setTimeout(function () {
        return setAnimationActiveUp(false);
      }, ICON$5.durationMs);
    }
  }, [userVoteDirection, handlePressUp]);
  var handleClickDown = useCallback(function (e) {
    handlePressDown(e);
    if (userVoteDirection !== -1) {
      setAnimationActiveDown(true);
      setTimeout(function () {
        return setAnimationActiveDown(false);
      }, ICON$5.durationMs);
    }
  }, [userVoteDirection, handlePressDown]);
  var iconStyleUp = _extends({}, style$6.icon, {
    animation: animationActiveUp ? ICON$5.animation + " " + ICON$5.durationMs + "ms ease forwards" : null
  });
  var iconStyleDown = _extends({}, style$6.icon, {
    animation: animationActiveDown ? ICON$5.animation + " " + ICON$5.durationMs + "ms ease forwards" : null
  });
  var ringStyleUp = _extends({}, style$6.ring, {
    animation: animationActiveUp ? RING$4.animation + " " + RING$4.durationMs + "ms ease forwards" : null
  });
  var ringStyleDown = _extends({}, style$6.ring, {
    animation: animationActiveDown ? RING$4.animation + " " + RING$4.durationMs + "ms ease forwards" : null
  });
  var upButtonStyle = {
    bg: function bg(theme) {
      var _theme$rawColors, _theme$rawColors2;
      return userVoteDirection === 1 ? (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.primary : (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.background;
    }
  };
  var downButtonStyle = {
    bg: function bg(theme) {
      var _theme$rawColors3, _theme$rawColors4;
      return userVoteDirection === -1 ? (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.secondary : (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.background;
    }
  };
  return jsx("div", {
    sx: style$6.root
  }, jsx("button", {
    onClick: handleClickUp,
    disabled: isLoading,
    sx: _extends({}, style$6.button, upButtonStyle)
  }, jsx("div", {
    sx: ringStyleUp
  }), jsx("div", null, jsx(ChevronIcon$1, {
    sx: iconStyleUp
  }))), isCounterVisible && jsx("div", {
    sx: style$6.counter
  }, totalScore), isLoading && jsx("div", {
    sx: style$6.counter
  }, "-"), jsx("button", {
    onClick: handleClickDown,
    disabled: isLoading,
    sx: _extends({}, style$6.button, downButtonStyle)
  }, jsx("div", {
    sx: ringStyleDown
  }), jsx("div", {
    style: {
      transform: "rotate(180deg)"
    }
  }, jsx(ChevronIcon$1, {
    sx: iconStyleDown
  }))));
};

var RedditArrow = function RedditArrow(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg",
    className: className
  }, React.createElement("path", {
    d: "m1005.6 678-373.2-500.4c-16.801-22.801-50.398-22.801-67.199 0l-372 500.4c-20.398 27.602-1.1992 66 33.602 66h163.2v253.2c0 18 14.398 33.602 33.602 33.602h352.8c18 0 33.602-14.398 33.602-33.602l-0.003906-252h162c34.801 0 54-39.598 33.602-67.199z"
  }));
};

var style$7 = {
  root: {
    color: "inherit",
    fontFamily: "inherit",
    display: "inline-flex",
    alignItems: "center",
    flexDirection: "column"
  },
  counter: {
    minWidth: "2em",
    textAlign: "center",
    fontFamily: "body"
  },
  icon: {
    height: "1.1em",
    display: "block",
    margin: "0 auto",
    fill: "#878a8c",
    backfaceVisibility: "hidden"
  },
  button: {
    border: "none",
    outline: "none",
    cursor: "pointer",
    background: "transparent",
    appearance: "none",
    position: "relative",
    fontSize: "inherit",
    borderRadius: "3px",
    transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
    width: "2em",
    height: "2em",
    padding: "0",
    lineHeight: "1em",
    ":hover": {
      transition: "all 250ms cubic-bezier(0.4, 0.0, 0.2, 1) 0ms",
      opacity: 0.75
    }
  }
};

var iconScale$7 = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ICON$6 = {
  animation: iconScale$7,
  durationMs: 700
};
var Reddit = function Reddit(_ref) {
  var isLoading = _ref.isLoading,
    userVoteDirection = _ref.userVoteDirection,
    totalScore = _ref.totalScore,
    handlePressUp = _ref.handlePressUp,
    handlePressDown = _ref.handlePressDown,
    isCounterVisible = _ref.isCounterVisible;
  var _useState = useState(false),
    animationActiveUp = _useState[0],
    setAnimationActiveUp = _useState[1];
  var _useState2 = useState(false),
    animationActiveDown = _useState2[0],
    setAnimationActiveDown = _useState2[1];
  var handleClickUp = useCallback(function (e) {
    handlePressUp(e);
    if (userVoteDirection !== 1) {
      setAnimationActiveUp(true);
    }
  }, [userVoteDirection, handlePressUp]);
  var handleClickDown = useCallback(function (e) {
    handlePressDown(e);
    if (userVoteDirection !== -1) {
      setAnimationActiveDown(true);
    }
  }, [userVoteDirection, handlePressDown]);
  var iconStyleUp = _extends({}, style$7.icon, {
    animation: animationActiveUp ? ICON$6.animation + " " + ICON$6.durationMs + "ms ease forwards" : "none"
  }, {
    fill: userVoteDirection === 1 ? "#cc3700" : "#25252550"
  });
  var iconStyleDown = _extends({}, style$7.icon, {
    animation: animationActiveDown ? ICON$6.animation + " " + ICON$6.durationMs + "ms ease forwards" : "none"
  }, {
    fill: userVoteDirection === -1 ? "#5a75cc" : "#25252550"
  });
  return jsx("div", {
    sx: style$7.root
  }, jsx("button", {
    onClick: handleClickUp,
    disabled: isLoading,
    onAnimationEnd: function onAnimationEnd() {
      return setAnimationActiveUp(false);
    },
    sx: style$7.button
  }, jsx(RedditArrow, {
    sx: iconStyleUp
  })), isCounterVisible && jsx("div", {
    sx: style$7.counter
  }, totalScore), isLoading && jsx("div", {
    sx: style$7.counter
  }, "-"), jsx("button", {
    onClick: handleClickDown,
    disabled: isLoading,
    onAnimationEnd: function onAnimationEnd() {
      return setAnimationActiveDown(false);
    },
    sx: _extends({}, style$7.button, {
      transform: "rotate(180deg)"
    })
  }, jsx(RedditArrow, {
    sx: iconStyleDown
  })));
};

var templates$2 = {
  Simple: Simple$2,
  Chevron: Chevron$1,
  Reddit: Reddit
};
var UpdownButton = function UpdownButton(_ref) {
  var id = _ref.id,
    namespace = _ref.namespace,
    hideCounterIfLessThan = _ref.hideCounterIfLessThan,
    children = _ref.children,
    component = _ref.component,
    onLoad = _ref.onLoad,
    onPressUp = _ref.onPressUp,
    onPressDown = _ref.onPressDown;
  var client = useContext(ClientContext);
  var _useState = useState(null),
    response = _useState[0],
    setResponse = _useState[1];
  useSafeEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            if (!client) {
              _context.next = 7;
              break;
            }
            _context.next = 4;
            return client.updownButtons.info({
              id: id,
              namespace: namespace
            });
          case 4:
            result = _context.sent;
            setResponse(result.data);
            if (onLoad) {
              onLoad(camelizeKeys(result.data));
            }
          case 7:
            _context.next = 13;
            break;
          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            console.error("Lyket error:", _context.t0 == null ? void 0 : _context.t0.errors[0].message);
            throw _context.t0;
          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  })), [client, id, namespace, onLoad]);
  var handlePressUp = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {
      var result;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              e.preventDefault();
              _context2.prev = 1;
              if (!client) {
                _context2.next = 8;
                break;
              }
              _context2.next = 5;
              return client.updownButtons.pressUp({
                id: id,
                namespace: namespace
              });
            case 5:
              result = _context2.sent;
              setResponse(result.data);
              if (onPressUp) {
                onPressUp(camelizeKeys(result.data));
              }
            case 8:
              _context2.next = 14;
              break;
            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](1);
              console.error("Lyket error:", _context2.t0 == null ? void 0 : _context2.t0.errors[0].message);
              throw _context2.t0;
            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 10]]);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [client, id, namespace, onPressUp]);
  var handlePressDown = useCallback( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
      var result;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              e.preventDefault();
              _context3.prev = 1;
              if (!client) {
                _context3.next = 8;
                break;
              }
              _context3.next = 5;
              return client.updownButtons.pressDown({
                id: id,
                namespace: namespace
              });
            case 5:
              result = _context3.sent;
              setResponse(result.data);
              if (onPressDown) {
                onPressDown(camelizeKeys(result.data));
              }
            case 8:
              _context3.next = 14;
              break;
            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](1);
              console.error("Lyket error:", _context3.t0 == null ? void 0 : _context3.t0.errors[0].message);
              throw _context3.t0;
            case 14:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[1, 10]]);
    }));
    return function (_x2) {
      return _ref4.apply(this, arguments);
    };
  }(), [client, id, namespace, onPressDown]);
  var isCounterVisible = true;
  if (!response || hideCounterIfLessThan && response && response.attributes.total_score < hideCounterIfLessThan) {
    isCounterVisible = false;
  }
  var props = {
    isLoading: !response,
    totalScore: (response == null ? void 0 : response.attributes.total_score) || 0,
    userVoteDirection: (response == null ? void 0 : response.attributes.user_vote_direction) || 0,
    handlePressUp: handlePressUp,
    handlePressDown: handlePressDown,
    isCounterVisible: isCounterVisible
  };
  if (children) {
    return children(props);
  }
  var Component = component || Simple$2;
  return React.createElement(Component, Object.assign({}, props));
};
UpdownButton.templates = templates$2;

var Icon$1 = function Icon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    className: className,
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("path", {
    d: "m800 375 333.33 33.332c61.109 5.5547 88.891 83.332 38.891 127.78l-250 222.22 72.223 322.22c16.668 66.668-50 116.67-105.55 83.332l-288.89-172.22-288.89 172.22c-55.555 33.332-122.22-16.668-111.11-83.332l77.777-322.22-250-222.22c-50-44.445-27.777-122.22 38.891-127.78l333.33-33.332 133.33-305.55c22.223-61.109 111.11-61.109 133.33 0l133.33 305.55z",
    fillRule: "evenodd"
  }));
};

var style$8 = {
  root: {
    color: "inherit",
    fontFamily: "inherit",
    display: "inline-flex",
    alignItems: "center"
  },
  counter: {
    ml: ".5em",
    color: function color(theme) {
      var _theme$rawColors;
      return (_theme$rawColors = theme.rawColors) == null ? void 0 : _theme$rawColors.text;
    },
    fontFamily: "body",
    whiteSpace: "nowrap"
  },
  icon: {
    height: "1.2em",
    display: "block",
    margin: "0 auto",
    fill: function fill(theme) {
      var _theme$rawColors2;
      return (_theme$rawColors2 = theme.rawColors) == null ? void 0 : _theme$rawColors2.icon;
    }
  },
  iconActive: {
    height: "1.2em",
    display: "block",
    margin: "0 auto",
    fill: function fill(theme) {
      var _theme$rawColors3;
      return (_theme$rawColors3 = theme.rawColors) == null ? void 0 : _theme$rawColors3.primary;
    }
  },
  ring: {
    opacity: "0",
    width: "90%",
    height: "90%",
    borderRadius: "3em",
    border: "1px solid",
    borderColor: function borderColor(theme) {
      var _theme$rawColors4;
      return (_theme$rawColors4 = theme.rawColors) == null ? void 0 : _theme$rawColors4.highlight;
    },
    boxSizing: "border-box",
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  },
  button: {
    backgroundColor: "transparent !important",
    border: "none !important",
    outline: "none !important",
    boxShadow: "0 0 0",
    transform: "translate3d(0,0,0)",
    cursor: "pointer",
    appearance: "none",
    position: "relative",
    fontSize: "inherit",
    transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
    lineHeight: "1em",
    ":hover": {
      transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
      opacity: 0.75
    }
  },
  buttonInactive: {
    backgroundColor: "transparent !important",
    border: "none !important",
    outline: "none !important",
    boxShadow: "0 0 0",
    transform: "translate3d(0,0,0)",
    cursor: "pointer",
    appearance: "none",
    position: "relative",
    fontSize: "inherit",
    transition: "all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms",
    lineHeight: "1em"
  }
};

var iconScale$8 = /*#__PURE__*/keyframes({
  "0%": {
    transform: "scale(0)"
  },
  "52%": {
    transform: "scale(1.2)"
  },
  "72%": {
    transform: "scale(0.9)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var ringScale$5 = /*#__PURE__*/keyframes({
  "0%": {
    opacity: "1",
    borderWidth: "0.5em"
  },
  "52%": {
    opacity: "0",
    borderWidth: "0"
  }
});
var RING$5 = {
  durationMs: 600,
  animation: ringScale$5
};
var ICON$7 = {
  animation: iconScale$8,
  durationMs: 700
};
var Base$1 = function Base(_ref) {
  var isLoading = _ref.isLoading,
    userRating = _ref.userRating,
    averageRating = _ref.averageRating,
    totalVotes = _ref.totalVotes,
    _ref$showRating = _ref.showRating,
    showRating = _ref$showRating === void 0 ? "average" : _ref$showRating,
    totalReviewsLabel = _ref.totalReviewsLabel,
    handlePress = _ref.handlePress,
    isCounterVisible = _ref.isCounterVisible,
    Icon = _ref.Icon,
    iconColor = _ref.iconColor;
  var _useState = useState(false),
    animationActive = _useState[0],
    setAnimationActive = _useState[1];
  var handleClick = useCallback(function (e, index) {
    e.preventDefault();
    handlePress(index);
    if (!userRating) {
      setAnimationActive(true);
      setTimeout(function () {
        return setAnimationActive(false);
      }, ICON$7.durationMs);
    }
  }, [userRating, handlePress]);
  var ringStyle = _extends({}, style$8.ring, {
    animation: animationActive ? RING$5.animation + " " + RING$5.durationMs + "ms ease forwards" : null
  });
  return jsx("div", {
    sx: style$8.root
  }, Array.from(Array(5).keys()).map(function (index) {
    var selectedRating = showRating === "average" ? averageRating : userRating;
    var currentRating = selectedRating === index + 1;
    var iconStyle = _extends({}, selectedRating > index ? style$8.iconActive : style$8.icon, showRating === "user" && currentRating && {
      animation: animationActive ? ICON$7.animation + " " + ICON$7.durationMs + "ms ease forwards" : null
    });
    if (iconColor) {
      iconStyle = _extends({}, iconStyle, {
        fill: selectedRating > index ? iconColor.active : iconColor.inactive
      });
    }
    return jsx("button", {
      key: "" + Icon.toString() + index,
      onClick: function onClick(e) {
        return handleClick(e, index + 1);
      },
      disabled: isLoading || showRating === "average",
      sx: showRating === "user" ? style$8.button : style$8.buttonInactive
    }, currentRating && jsx("div", {
      sx: ringStyle
    }), jsx(Icon, {
      sx: iconStyle,
      className: "icon-" + index
    }));
  }), isCounterVisible && showRating === "average" && jsx("span", {
    sx: style$8.counter
  }, totalVotes, " ", totalReviewsLabel || "review" + (totalVotes !== 1 ? "s" : "")));
};

var Custom = function Custom(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return jsx(Base$1, Object.assign({}, props, {
    Icon: Icon$1
  }));
};

var Icon$2 = function Icon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg",
    className: className
  }, React.createElement("path", {
    d: "m600 158.93c-62.824-71.18-154.74-116.07-257.14-116.07-189.35 0-342.86 153.5-342.86 342.86v1.1562c0 231.78 199.52 488.54 598.56 770.27 354.02-252.97 551.38-483.47 592.07-691.51 6.1211-25.641 9.3633-52.402 9.3633-79.922 0-189.36-153.5-342.86-342.86-342.86-102.4 0-194.32 44.895-257.14 116.07z",
    fillRule: "evenodd"
  }));
};

var Heart$2 = function Heart(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return jsx(Base$1, Object.assign({}, props, {
    Icon: Icon$2
  }));
};

var Icon$3 = function Icon(_ref) {
  var className = _ref.className;
  return React.createElement("svg", {
    className: className,
    version: "1.1",
    viewBox: "0 0 1200 1200",
    xmlns: "http://www.w3.org/2000/svg"
  }, React.createElement("path", {
    d: "m800 375 333.33 33.332c61.109 5.5547 88.891 83.332 38.891 127.78l-250 222.22 72.223 322.22c16.668 66.668-50 116.67-105.55 83.332l-288.89-172.22-288.89 172.22c-55.555 33.332-122.22-16.668-111.11-83.332l77.777-322.22-250-222.22c-50-44.445-27.777-122.22 38.891-127.78l333.33-33.332 133.33-305.55c22.223-61.109 111.11-61.109 133.33 0l133.33 305.55z",
    fillRule: "evenodd"
  }));
};

var Star = function Star(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return jsx(Base$1, Object.assign({}, props, {
    Icon: Icon$3,
    iconColor: {
      active: "rgb(249, 199, 61)",
      inactive: "#e6e6e6"
    }
  }));
};

var templates$3 = {
  Custom: Custom,
  Heart: Heart$2,
  Star: Star
};
var RateButton = function RateButton(_ref) {
  var id = _ref.id,
    namespace = _ref.namespace,
    hideCounterIfLessThan = _ref.hideCounterIfLessThan,
    showRating = _ref.showRating,
    children = _ref.children,
    component = _ref.component,
    onLoad = _ref.onLoad,
    onPress = _ref.onPress;
  var client = useContext(ClientContext);
  var _useForceUpdate = useForceUpdate(),
    registeredButtons = _useForceUpdate.registeredButtons,
    forceUpdate = _useForceUpdate.forceUpdate;
  var rateButtonId = (namespace || "no-namespace") + ":" + id;
  var shouldUpdate = registeredButtons[rateButtonId];
  var _useState = useState(null),
    response = _useState[0],
    setResponse = _useState[1];
  useSafeEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var result;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (client) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            _context.prev = 2;
            _context.next = 5;
            return client.rateButtons.info({
              id: id,
              namespace: namespace
            });
          case 5:
            result = _context.sent;
            setResponse(result.data);
            if (onLoad) {
              onLoad(camelizeKeys(result.data));
            }
            _context.next = 14;
            break;
          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](2);
            console.error("Lyket error:", _context.t0 == null ? void 0 : _context.t0.errors[0].message);
            throw _context.t0;
          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 10]]);
  })), [client, id, namespace, onLoad, setResponse, shouldUpdate]);
  var handlePress = useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(rating) {
      var _extends2, result;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (client) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              _context2.prev = 2;
              _context2.next = 5;
              return client.rateButtons.press({
                id: id,
                namespace: namespace,
                rating: rating
              });
            case 5:
              result = _context2.sent;
              setResponse(result.data);
              forceUpdate(_extends({}, registeredButtons, (_extends2 = {}, _extends2[rateButtonId] = {}, _extends2)));
              if (onPress) {
                onPress(camelizeKeys(result.data));
              }
              _context2.next = 15;
              break;
            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](2);
              console.error("Lyket error:", _context2.t0 == null ? void 0 : _context2.t0.errors[0].message);
              throw _context2.t0;
            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[2, 11]]);
    }));
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [client, id, namespace, onPress, setResponse, shouldUpdate]);
  var isCounterVisible = true;
  if (!response || hideCounterIfLessThan && response && response.attributes.average_rating < hideCounterIfLessThan) {
    isCounterVisible = false;
  }
  var props = {
    showRating: showRating,
    isLoading: !response,
    totalVotes: (response == null ? void 0 : response.attributes.total_votes) || 0,
    averageRating: (response == null ? void 0 : response.attributes.average_rating) || 0,
    userRating: response == null ? void 0 : response.attributes.user_rating,
    handlePress: handlePress,
    isCounterVisible: isCounterVisible
  };
  if (children) {
    return children(props);
  }
  var Component = component || Star;
  return React.createElement(Component, Object.assign({}, props));
};
RateButton.templates = templates$3;

export { ClapButton, Client, LikeButton, Provider, RateButton, UpdownButton };
//# sourceMappingURL=react.esm.js.map
