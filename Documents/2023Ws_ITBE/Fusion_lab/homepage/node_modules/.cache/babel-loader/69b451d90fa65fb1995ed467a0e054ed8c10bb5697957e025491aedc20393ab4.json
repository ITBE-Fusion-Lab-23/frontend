{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stack as d3Stack } from 'd3-shape';\nimport { getStackingGroups } from '../internals/stackSeries';\nimport defaultizeValueFormatter from '../internals/defaultizeValueFormatter';\nlet warnedOnce = false;\n\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  var _ref;\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = getStackingGroups(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = (_ref = dataset) != null ? _ref : [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined && process.env.NODE_ENV !== 'production') {\n      throw new Error([`MUI-X-Charts: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = d3Stack().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => {\n      var _d$key;\n      return (_d$key = d[key]) != null ? _d$key : 0;\n    }) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = _extends({}, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production' && !warnedOnce && value !== null) {\n              warnedOnce = true;\n              console.error([`MUI-X charts: your dataset key \"${dataKey}\" is used for plotting line, but contains nonnumerical elements.`, 'Line plots only support numbers and null values.']);\n            }\n            return null;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: defaultizeValueFormatter(completedSeries, v => v == null ? void 0 : v.toLocaleString())\n  };\n};\nexport default formatter;","map":{"version":3,"names":["_extends","stack","d3Stack","getStackingGroups","defaultizeValueFormatter","warnedOnce","formatter","params","dataset","_ref","seriesOrder","series","stackingGroups","d3Dataset","forEach","id","data","undefined","value","index","length","push","process","env","NODE_ENV","Error","join","completedSeries","stackingGroup","ids","stackingOrder","stackingOffset","stackedSeries","keys","map","dataKey","d","key","_d$key","order","offset","console","error","stackedData","a","b","v","toLocaleString"],"sources":["/Users/luying/Documents/2023Ws_ITBE/Fusion_lab/homepage/node_modules/@mui/x-charts/esm/LineChart/formatter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stack as d3Stack } from 'd3-shape';\nimport { getStackingGroups } from '../internals/stackSeries';\nimport defaultizeValueFormatter from '../internals/defaultizeValueFormatter';\nlet warnedOnce = false;\n\n// For now it's a copy past of bar charts formatter, but maybe will diverge later\nconst formatter = (params, dataset) => {\n  var _ref;\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = getStackingGroups(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = (_ref = dataset) != null ? _ref : [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined && process.env.NODE_ENV !== 'production') {\n      throw new Error([`MUI-X-Charts: line series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    // Get stacked values, and derive the domain\n    const {\n      ids,\n      stackingOrder,\n      stackingOffset\n    } = stackingGroup;\n    const stackedSeries = d3Stack().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => {\n      var _d$key;\n      return (_d$key = d[key]) != null ? _d$key : 0;\n    }) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = _extends({}, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production' && !warnedOnce && value !== null) {\n              warnedOnce = true;\n              console.error([`MUI-X charts: your dataset key \"${dataKey}\" is used for plotting line, but contains nonnumerical elements.`, 'Line plots only support numbers and null values.']);\n            }\n            return null;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: defaultizeValueFormatter(completedSeries, v => v == null ? void 0 : v.toLocaleString())\n  };\n};\nexport default formatter;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,KAAK,IAAIC,OAAO,QAAQ,UAAU;AAC3C,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,OAAOC,wBAAwB,MAAM,uCAAuC;AAC5E,IAAIC,UAAU,GAAG,KAAK;;AAEtB;AACA,MAAMC,SAAS,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;EACrC,IAAIC,IAAI;EACR,MAAM;IACJC,WAAW;IACXC;EACF,CAAC,GAAGJ,MAAM;EACV,MAAMK,cAAc,GAAGT,iBAAiB,CAACI,MAAM,CAAC;;EAEhD;EACA,MAAMM,SAAS,GAAG,CAACJ,IAAI,GAAGD,OAAO,KAAK,IAAI,GAAGC,IAAI,GAAG,EAAE;EACtDC,WAAW,CAACI,OAAO,CAACC,EAAE,IAAI;IACxB,MAAMC,IAAI,GAAGL,MAAM,CAACI,EAAE,CAAC,CAACC,IAAI;IAC5B,IAAIA,IAAI,KAAKC,SAAS,EAAE;MACtBD,IAAI,CAACF,OAAO,CAAC,CAACI,KAAK,EAAEC,KAAK,KAAK;QAC7B,IAAIN,SAAS,CAACO,MAAM,IAAID,KAAK,EAAE;UAC7BN,SAAS,CAACQ,IAAI,CAAC;YACb,CAACN,EAAE,GAAGG;UACR,CAAC,CAAC;QACJ,CAAC,MAAM;UACLL,SAAS,CAACM,KAAK,CAAC,CAACJ,EAAE,CAAC,GAAGG,KAAK;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIV,OAAO,KAAKS,SAAS,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzE,MAAM,IAAIC,KAAK,CAAC,CAAE,sCAAqCV,EAAG,gBAAe,EAAE,uEAAuE,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC,CAAC;IACjK;EACF,CAAC,CAAC;EACF,MAAMC,eAAe,GAAG,CAAC,CAAC;EAC1Bf,cAAc,CAACE,OAAO,CAACc,aAAa,IAAI;IACtC;IACA,MAAM;MACJC,GAAG;MACHC,aAAa;MACbC;IACF,CAAC,GAAGH,aAAa;IACjB,MAAMI,aAAa,GAAG9B,OAAO,CAAC,CAAC,CAAC+B,IAAI,CAACJ,GAAG,CAACK,GAAG,CAACnB,EAAE,IAAI;MACjD;MACA,MAAMoB,OAAO,GAAGxB,MAAM,CAACI,EAAE,CAAC,CAACoB,OAAO;MAClC,OAAOxB,MAAM,CAACI,EAAE,CAAC,CAACC,IAAI,KAAKC,SAAS,IAAIkB,OAAO,KAAKlB,SAAS,GAAGkB,OAAO,GAAGpB,EAAE;IAC9E,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAACkB,CAAC,EAAEC,GAAG,KAAK;MACpB,IAAIC,MAAM;MACV,OAAO,CAACA,MAAM,GAAGF,CAAC,CAACC,GAAG,CAAC,KAAK,IAAI,GAAGC,MAAM,GAAG,CAAC;IAC/C,CAAC,CAAC,CAAC;IAAA,CACFC,KAAK,CAACT,aAAa,CAAC,CAACU,MAAM,CAACT,cAAc,CAAC,CAAClB,SAAS,CAAC;IACvDgB,GAAG,CAACf,OAAO,CAAC,CAACC,EAAE,EAAEI,KAAK,KAAK;MACzB,MAAMgB,OAAO,GAAGxB,MAAM,CAACI,EAAE,CAAC,CAACoB,OAAO;MAClCR,eAAe,CAACZ,EAAE,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,EAAEW,MAAM,CAACI,EAAE,CAAC,EAAE;QAC7CC,IAAI,EAAEmB,OAAO,GAAG3B,OAAO,CAAC0B,GAAG,CAAClB,IAAI,IAAI;UAClC,MAAME,KAAK,GAAGF,IAAI,CAACmB,OAAO,CAAC;UAC3B,IAAI,OAAOjB,KAAK,KAAK,QAAQ,EAAE;YAC7B,IAAII,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAACnB,UAAU,IAAIa,KAAK,KAAK,IAAI,EAAE;cAC1Eb,UAAU,GAAG,IAAI;cACjBoC,OAAO,CAACC,KAAK,CAAC,CAAE,mCAAkCP,OAAQ,kEAAiE,EAAE,kDAAkD,CAAC,CAAC;YACnL;YACA,OAAO,IAAI;UACb;UACA,OAAOjB,KAAK;QACd,CAAC,CAAC,GAAGP,MAAM,CAACI,EAAE,CAAC,CAACC,IAAI;QACpB2B,WAAW,EAAEX,aAAa,CAACb,KAAK,CAAC,CAACe,GAAG,CAAC,CAAC,CAACU,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACD,CAAC,EAAEC,CAAC,CAAC;MAC1D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO;IACLnC,WAAW;IACXE,cAAc;IACdD,MAAM,EAAEP,wBAAwB,CAACuB,eAAe,EAAEmB,CAAC,IAAIA,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,CAAC,CAACC,cAAc,CAAC,CAAC;EAChG,CAAC;AACH,CAAC;AACD,eAAezC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}